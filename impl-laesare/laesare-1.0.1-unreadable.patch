commit af5174e8dab5d055d8ffcc0fd786397c243c1fcb (HEAD -> unreadable)
Author: Lassi Kortela <lassi@lassi.io>
Date:   Sat Jun 3 12:38:22 2023 +0300

    Support unreadable data (SRFI 243)
    
    - Unreadable data with #< syntax. The data after #< cannot be parsed.
    
    - Unreadable object with #?foo syntax, where foo is any datum.

diff --git a/reader.sls b/reader.sls
index be153a4..556229b 100644
--- a/reader.sls
+++ b/reader.sls
@@ -40,7 +40,13 @@
     reader-saved-line reader-saved-column
     annotation? annotation-expression annotation-stripped annotation-source
     annotation-source->condition source-condition? source-filename
-    source-line source-column)
+    source-line source-column
+    unreadable-object?
+    unreadable-object
+    unreadable-object-stand-in
+    make-unreadable-error
+    unreadable-error?
+    unreadable-error-object)
   (import
     (rnrs arithmetic fixnums (6))
     (rnrs base (6))
@@ -156,7 +162,9 @@
     (let*-values (((type x) (get-lexeme reader))
                   ((d _) (handle-lexeme reader type x labels #f)))
       (resolve-labels reader labels)
-      d)))
+      (if (unreadable-object? d)
+          (raise-unreadable-object reader d)
+          d))))
 
 ;;; Lexeme reader
 
@@ -456,6 +464,36 @@
         (get-lexeme p)
         (values type lexeme))))
 
+(define-record-type (<unreadable-object>
+                     unreadable-object
+                     unreadable-object?)
+  (fields (immutable stand-in unreadable-object-stand-in))
+  (sealed #t) (opaque #f)
+  (nongenerative unreadable-object-v0-eec5b78f-a766-4be4-9cd0-fbb52ec572dc))
+
+(define-condition-type &unreadable &lexical
+  make-unreadable-error
+  unreadable-error?
+  (object unreadable-error-object))
+
+(define (m-s-c reader)
+  (make-source-condition
+   (reader-filename reader)
+   (reader-saved-line reader)
+   (reader-saved-column reader)))
+
+(define (raise-unreadable-data reader)
+  (raise
+   (condition
+    (make-unreadable-error #f)
+    (m-s-c reader))))
+
+(define (raise-unreadable-object reader uro)
+  (raise
+   (condition
+    (make-unreadable-error uro)
+    (m-s-c reader))))
+
 ;; Get the next token. Can be a lexeme, directive, whitespace or comment.
 (define (get-token p)
   (assert (reader? p))
@@ -635,6 +673,10 @@
                        (values 'value #\xFFFD))
                       (else
                        (lp (cons (get-char p) char*)))))))
+           ((#\<)
+            (raise-unreadable-data p))
+           ((#\?)
+            (values 'abbrev 'unreadable-object))
            ((#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
             (assert-mode p "#<n>=<datum> and #<n>#" '(rnrs r7rs))
             (let lp ((char* (list c)))
@@ -840,7 +882,9 @@
                 (values lex lex))
                (else
                 (let-values (((d d^) (handle-lexeme p type lex labels #t)))
-                  (let ((s (list x d)))
+                  (let ((s (if (eqv? 'unreadable-object x)
+                               (unreadable-object d)
+                               (list x d))))
                     (values s (annotate src s (list x d^)))))))))
       ((label)
        ;; The object that follows this label can be referred
diff --git a/tests/test-reader.sps b/tests/test-reader.sps
index 8ba5bea..83add62 100755
--- a/tests/test-reader.sps
+++ b/tests/test-reader.sps
@@ -266,11 +266,30 @@
             (let ((reader (make-reader (open-string-input-port input) "<test>")))
               (reader-mode-set! reader mode)
               (guard (con
+                      ((unreadable-error? con)
+                       (let ((obj (unreadable-error-object con)))
+                         (if obj
+                             `(&unreadable ,(unreadable-object-stand-in obj))
+                             '&unreadable)))
                       (else
                        ;; (display (condition-message con)) (newline)
                        ;; (write (condition-irritants con)) (newline)
                        'error))
-                (read-datum reader))))))
+                (read-datum reader)))))
+
+         (equal-unreadable?
+          (lambda (a b)
+            (or (equal? a b)
+                (and (unreadable-object? a)
+                     (unreadable-object? b)
+                     (equal-unreadable?
+                      (unreadable-object-stand-in a)
+                      (unreadable-object-stand-in b)))
+                (and (pair? a)
+                     (pair? b)
+                     (equal-unreadable? (car a) (car b))
+                     (equal-unreadable? (cdr a) (cdr b)))))))
+
   ;; Booleans
   (test-equal #f (stripped-read 'rnrs "#!false"))
   (test-equal #t (stripped-read 'rnrs "#!true"))
@@ -320,6 +339,22 @@
   (test-equal 0 (stripped-read 'r7rs "+0"))
   ;; (test-equal 'error (stripped-read 'r7rs "+."))
   (test-equal 0.0 (stripped-read 'r7rs "+.0"))
+
+  ;; Unreadable data
+  (test-equal '&unreadable
+              (stripped-read 'rnrs "#<"))
+  (test-equal '&unreadable
+              (stripped-read 'rnrs "#<procedure append>"))
+  (test-equal 'error
+              (stripped-read 'rnrs "#?"))
+  (test-equal '(&unreadable #f)
+              (stripped-read 'rnrs "#?#f"))
+  (test-equal '(&unreadable (a b c))
+              (stripped-read 'rnrs "#?(a b c)"))
+  (test-assert (equal-unreadable?
+                `(&unreadable (a ,(unreadable-object 'b)))
+                (stripped-read 'rnrs "#?(a #?b)")))
+
   )
 (test-end)
 
